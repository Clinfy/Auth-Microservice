# Nombre del workflow: CI para Microservicios de Clinfy con Testcontainers
name: Clinfy Microservice CI

# Controla cuándo se ejecuta el workflow.
# Se activará en cada push o pull request a las ramas 'main' y 'develop'.
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # Job único para construir y ejecutar las pruebas.
  build-and-test:
    name: Build and Test
    # Se ejecutará en una máquina virtual con la última versión de Ubuntu.
    runs-on: ubuntu-latest

    # PASO CLAVE: Define los servicios que se ejecutarán en contenedores junto al job.
    services:
      # Inicia un contenedor de Docker-in-Docker (dind) para que Testcontainers
      # pueda levantar la base de datos PostgreSQL para las pruebas de integración.
      docker:
        image: docker:23-dind # Usar una versión específica es una mejor práctica que 'latest'.
        # Se pasan los parámetros del healthcheck a la clave 'options',
        # que los pasa directamente al comando 'docker create'. Esta es la sintaxis correcta
        # para healthchecks de servicios en GitHub Actions.
        options: >-
          --privileged
          --health-cmd "docker info"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          # Mapea el puerto 2375 del contenedor al puerto 2375 del host del runner.
          - 2375:2375

    steps:
      # 1. Clona tu repositorio para que el job pueda acceder al código.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura el entorno de Node.js a la versión especificada.
      - name: Set up Node.js v24.5.0
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          # Habilita el cache de dependencias de npm para acelerar instalaciones futuras.
          cache: 'npm'

      # 3. Instala las dependencias del proyecto usando 'npm ci' para una instalación limpia.
      - name: Install NPM dependencies
        run: npm ci

      # 4. Ejecuta todas las pruebas (unitarias, integración, e2e).
      # El healthcheck del servicio ya garantiza que Docker está listo en este punto.
      - name: Run tests with Testcontainers
        run: npm run test
        env:
          # --- Configuración para Testcontainers y Docker CLI ---
          DOCKER_HOST: tcp://127.0.0.1:2375
          DOCKER_TLS_CERTDIR: ""
          # (SOLUCIÓN) Esta variable le indica explícitamente a la librería Testcontainers
          # dónde encontrar el daemon de Docker, resolviendo el error "Could not find a working container runtime strategy".
          TESTCONTAINERS_HOST_OVERRIDE: 127.0.0.1
          TESTCONTAINERS_DOCKER_PORT_OVERRIDE: 2375
          TESTCONTAINERS_RYUK_DISABLED: true

          # --- Configuración de la aplicación (Ejemplos para Clinfy) ---
          NODE_ENV: test
          AUTH_MICROSERVICE_URL: http://localhost:3001
          EMAIL_MICROSERVICE_URL: http://localhost:3002

