# Nombre del workflow: CI para Microservicios de Clinfy con Testcontainers
name: Clinfy Microservice CI

# Controla cuándo se ejecuta el workflow.
# Se activará en cada push o pull request a las ramas 'main' y 'develop'.
on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # Job único para construir y ejecutar las pruebas.
  build-and-test:
    name: Build and Test
    # Se ejecutará en una máquina virtual con la última versión de Ubuntu.
    runs-on: ubuntu-latest

    # PASO CLAVE: Define los servicios que se ejecutarán en contenedores junto al job.
    services:
      # Inicia un contenedor de Docker-in-Docker (dind) para que Testcontainers
      # pueda levantar la base de datos PostgreSQL para las pruebas de integración.
      docker:
        image: docker:23-dind # Usar una versión específica es una mejor práctica que 'latest'.
        # La opción '--privileged' es necesaria para que dind funcione correctamente.
        options: >-
          --privileged
        ports:
          # Mapea el puerto 2375 del contenedor al puerto 2375 del host del runner.
          - 2375:2375
        # (CORRECCIÓN CLAVE) Se añade un 'healthcheck' para asegurar que el servicio Docker
        # esté completamente listo antes de que los pasos del job comiencen a ejecutarse.
        # Esto reemplaza el script de espera manual y es la solución más robusta para
        # los errores de 'EOF' y 'connection reset by peer'.
        healthcheck:
          test: ["CMD", "docker", "info"]
          interval: 10s
          timeout: 5s
          retries: 5

    steps:
      # 1. Clona tu repositorio para que el job pueda acceder al código.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Configura el entorno de Node.js a la versión especificada.
      - name: Set up Node.js v24.5.0
        uses: actions/setup-node@v4
        with:
          node-version: '24.5.0'
          # Habilita el cache de dependencias de npm para acelerar instalaciones futuras.
          cache: 'npm'

      # 3. Instala las dependencias del proyecto usando 'npm ci' para una instalación limpia.
      - name: Install NPM dependencies
        run: npm ci

      # 4. Ejecuta todas las pruebas (unitarias, integración, e2e).
      # El 'healthcheck' del servicio ya garantiza que Docker está listo en este punto.
      - name: Run tests with Testcontainers
        run: npm run test
        env:
          # --- Configuración para Testcontainers y Docker CLI ---
          # Apuntamos explícitamente a la IP 127.0.0.1 (IPv4) para la conexión.
          DOCKER_HOST: tcp://127.0.0.1:2375
          # Se deshabilita la verificación TLS, necesaria para la configuración por defecto de dind.
          DOCKER_TLS_CERTDIR: ""
          # Deshabilita Ryuk, el 'recolector de basura' de Testcontainers.
          # Es una buena práctica en entornos de CI efímeros.
          TESTCONTAINERS_RYUK_DISABLED: true

          # --- Configuración de la aplicación (Ejemplos para Clinfy) ---
          # Es una buena práctica pasar la configuración explícitamente a tu aplicación
          # durante las pruebas, simulando un entorno real.
          NODE_ENV: test
          AUTH_MICROSERVICE_URL: http://localhost:3001 # URL de un mock o servicio de prueba
          EMAIL_MICROSERVICE_URL: http://localhost:3002 # URL de un mock o servicio de prueba

