import { Test, TestingModule } from '@nestjs/testing';
import { getRepositoryToken } from '@nestjs/typeorm';
import { DataSource, Repository } from 'typeorm';
import { UsersService } from 'src/services/users/users.service';
import { RolesService } from 'src/services/roles/roles.service';
import { PermissionsService } from 'src/services/permissions/permissions.service';
import { UserEntity } from 'src/entities/user.entity';
import { RoleEntity } from 'src/entities/role.entity';
import { PermissionEntity } from 'src/entities/permission.entity';
import { JwtService } from 'src/services/JWT/jwt.service';
import { EmailService } from 'src/clients/email/email.service';
import { entities } from 'src/entities';
import { PostgreSqlContainer, StartedPostgreSqlContainer } from '@testcontainers/postgresql';

describe('UsersService (integration)', () => {
  let moduleRef: TestingModule;
  let usersService: UsersService;
  let rolesService: RolesService;
  let permissionsService: PermissionsService;
  let userRepository: Repository<UserEntity>;
  let dataSource: DataSource;
  let container: StartedPostgreSqlContainer;

  jest.setTimeout(60000);

  const jwtServiceMock = {
    refreshToken: jest.fn(),
    generateToken: jest.fn(),
    getPayload: jest.fn(),
  };

  const emailServiceMock = {
    sendResetPasswordMail: jest.fn(),
    confirmPasswordChange: jest.fn(),
  };

  beforeAll(async () => {
    console.log('Starting PostgreSQL container...');
    container = await new PostgreSqlContainer('postgres:17.6').start()
    console.log('PostgreSQL container started');

    dataSource = new DataSource({
      type: 'postgres',
      host: container.getHost(),
      port: container.getPort(),
      username: container.getUsername(),
      password: container.getPassword(),
      database: container.getDatabase(),
      entities: [...entities],
      synchronize: true
    })

    await dataSource.initialize()

    moduleRef = await Test.createTestingModule({
      imports: [],
      providers: [
        UsersService,
        RolesService,
        PermissionsService,
        {
          provide: JwtService,
          useValue: jwtServiceMock,
        },
        {
          provide: EmailService,
          useValue: emailServiceMock,
        },
        {
          provide: getRepositoryToken(UserEntity),
          useValue: dataSource.getRepository(UserEntity),
        },
        {
          provide: getRepositoryToken(RoleEntity),
          useValue: dataSource.getRepository(RoleEntity),
        },
        {
          provide: getRepositoryToken(PermissionEntity),
          useValue: dataSource.getRepository(PermissionEntity),
        },
        {
          provide: DataSource,
          useValue: dataSource,
        }
      ],
    }).compile();

    usersService = moduleRef.get(UsersService);
    rolesService = moduleRef.get(RolesService);
    permissionsService = moduleRef.get(PermissionsService);
    userRepository = moduleRef.get(getRepositoryToken(UserEntity));
  });

  afterAll(async () => {
    await dataSource.destroy();
    await container.stop();
  });

  beforeEach(async () => {
    jest.clearAllMocks();
    await dataSource.synchronize(true);
  });

  it('registers a user and stores a hashed password', async () => {
    const response = await usersService.register({
      email: 'alice@example.com',
      password: 'P@ssword123',
    });

    expect(response).toEqual({ message: 'User alice@example.com created' });

    const stored = await userRepository.findOneBy({ email: 'alice@example.com' });
    expect(stored).toBeDefined();
    expect(stored?.password).toMatch(/^\$2[aby]\$.+/);
  });

  it('logs in a user and returns tokens generated by the JWT service', async () => {
    await usersService.register({ email: 'bob@example.com', password: 'Secret123' });

    jwtServiceMock.generateToken.mockImplementation(async (_payload: any, type: string) => `${type}-token`);

    const tokens = await usersService.logIn({ email: 'bob@example.com', password: 'Secret123' });

    expect(tokens).toEqual({
      accessToken: 'auth-token',
      refreshToken: 'refresh-token',
    });
    expect(jwtServiceMock.generateToken).toHaveBeenCalledTimes(2);
  });

  it('assigns roles to a user and allows permission checks', async () => {
    await usersService.register({ email: 'carol@example.com', password: 'Secret123' });
    const user = await userRepository.findOne({ where: { email: 'carol@example.com' } });
    expect(user).toBeDefined();

    const permission = await permissionsService.create({ code: 'USERS_ASSIGN' });
    const role = await rolesService.create({ name: 'manager' });
    await rolesService.assignPermissions(role.id, { permissionIds: [permission.id] });

    const updated = await usersService.assignRole(user!.id, { rolesIds: [role.id] });

    expect(updated.roles).toHaveLength(1);
    expect(updated.roles[0].name).toBe('manager');

    const canDo = await usersService.canDo(updated, 'USERS_ASSIGN');
    expect(canDo).toBe(true);
  });

  it('delegates refresh token issuance to the JWT service', async () => {
    jwtServiceMock.refreshToken.mockResolvedValue({
      accessToken: 'next-access',
      refreshToken: 'next-refresh',
    });

    await expect(usersService.refreshToken('refresh-token')).resolves.toEqual({
      accessToken: 'next-access',
      refreshToken: 'next-refresh',
    });
    expect(jwtServiceMock.refreshToken).toHaveBeenCalledWith('refresh-token');
  });

  it('starts the forgot password flow and stores the generated token', async () => {
    await usersService.register({ email: 'dave@example.com', password: 'Secret123' });
    jwtServiceMock.generateToken.mockResolvedValue('reset-token');
    emailServiceMock.sendResetPasswordMail.mockResolvedValue(undefined);

    const response = await usersService.forgotPassword({ email: 'dave@example.com' });
    expect(response).toEqual({
      message: 'If the email exists, a reset password link will be sent to it.',
    });
    expect(jwtServiceMock.generateToken).toHaveBeenCalledWith({ email: 'dave@example.com' }, 'resetPassword');
    expect(emailServiceMock.sendResetPasswordMail).toHaveBeenCalledWith('dave@example.com', 'reset-token');

    const stored = await userRepository.findOneBy({ email: 'dave@example.com' });
    expect(stored?.passResetToken).toBe('reset-token');
  });

  it('resets the password, clears the token, and notifies the user', async () => {
    await usersService.register({ email: 'erin@example.com', password: 'OldPassword1' });
    jwtServiceMock.generateToken.mockResolvedValue('reset-token');
    emailServiceMock.sendResetPasswordMail.mockResolvedValue(undefined);
    await usersService.forgotPassword({ email: 'erin@example.com' });

    jwtServiceMock.getPayload.mockResolvedValue({
      email: 'erin@example.com',
      exp: Math.floor(Date.now() / 1000) + 300,
    } as any);
    emailServiceMock.confirmPasswordChange.mockResolvedValue(undefined);

    const response = await usersService.resetPassword('reset-token', { password: 'NewPassword1' });
    expect(response).toEqual({ message: 'Password reset successfully' });
    expect(emailServiceMock.confirmPasswordChange).toHaveBeenCalledWith('erin@example.com');

    const stored = await userRepository.findOneBy({ email: 'erin@example.com' });
    expect(stored?.passResetToken).toBeNull();
    expect(stored?.password).toMatch(/^\$2[aby]\$.+/);
    expect(stored?.password).not.toBe('NewPassword1');
  });
});
